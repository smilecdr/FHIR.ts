/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { BiologicallyDerivedProductDispensePerformer } from './biologicallyDerivedProductDispensePerformer';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Quantity } from './quantity';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.
 */
export interface BiologicallyDerivedProductDispense { 
    /**
     * This is a BiologicallyDerivedProductDispense resource
     */
    resourceType: 'BiologicallyDerivedProductDispense';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier.
     */
    identifier?: Array<Identifier>;
    /**
     * The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource.
     */
    basedOn?: Array<Reference>;
    /**
     * A larger event of which this particular event is a component.
     */
    partOf?: Array<Reference>;
    status?: Code;
    originRelationshipType?: CodeableConcept;
    product: Reference;
    patient: Reference;
    matchStatus?: CodeableConcept;
    /**
     * Indicates who or what performed an action.
     */
    performer?: Array<BiologicallyDerivedProductDispensePerformer>;
    location?: Reference;
    quantity?: Quantity;
    preparedDate?: Date;
    whenHandedOver?: Date;
    destination?: Reference;
    /**
     * Additional notes.
     */
    note?: Array<Annotation>;
    usageInstruction?: string;
}