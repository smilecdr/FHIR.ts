/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Address } from './address';
import { Attachment } from './attachment';
import { Code } from './code';
import { ContactPoint } from './contactPoint';
import { Extension } from './extension';
import { HumanName } from './humanName';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { PractitionerCommunication } from './practitionerCommunication';
import { PractitionerQualification } from './practitionerQualification';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * A person who is directly or indirectly involved in the provisioning of healthcare or related services.
 */
export interface Practitioner { 
    /**
     * This is a Practitioner resource
     */
    resourceType: 'Practitioner';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * An identifier that applies to this person in this role.
     */
    identifier?: Array<Identifier>;
    active?: boolean;
    /**
     * The name(s) associated with the practitioner.
     */
    name?: Array<HumanName>;
    /**
     * A contact detail for the practitioner, e.g. a telephone number or an email address.
     */
    telecom?: Array<ContactPoint>;
    gender?: Code;
    birthDate?: string;
    /**
     * Indicates if the practitioner is deceased or not.
     */
    deceasedBoolean?: boolean;
    /**
     * Indicates if the practitioner is deceased or not.
     */
    deceasedDateTime?: string;
    /**
     * Address(es) of the practitioner that are not role specific (typically home address).  Work addresses are not typically entered in this property as they are usually role dependent.
     */
    address?: Array<Address>;
    /**
     * Image of the person.
     */
    photo?: Array<Attachment>;
    /**
     * The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality.
     */
    qualification?: Array<PractitionerQualification>;
    /**
     * A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.  The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis).
     */
    communication?: Array<PractitionerCommunication>;
}