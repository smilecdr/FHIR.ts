/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { DateTime } from './dateTime';
import { Dosage } from './dosage';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Markdown } from './markdown';
import { MedicationDispensePerformer } from './medicationDispensePerformer';
import { MedicationDispenseSubstitution } from './medicationDispenseSubstitution';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Quantity } from './quantity';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
 */
export interface MedicationDispense { 
    /**
     * This is a MedicationDispense resource
     */
    resourceType: 'MedicationDispense';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Array<Identifier>;
    /**
     * A plan that is fulfilled in whole or in part by this MedicationDispense.
     */
    basedOn?: Array<Reference>;
    /**
     * The procedure or medication administration that triggered the dispense.
     */
    partOf?: Array<Reference>;
    status?: Code;
    notPerformedReason?: CodeableReference;
    statusChanged?: Date;
    /**
     * Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).
     */
    category?: Array<CodeableConcept>;
    medication: CodeableReference;
    subject: Reference;
    encounter?: Reference;
    /**
     * Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.
     */
    supportingInformation?: Array<Reference>;
    /**
     * Indicates who or what performed the event.
     */
    performer?: Array<MedicationDispensePerformer>;
    location?: Reference;
    /**
     * Indicates the medication order that is being dispensed against.
     */
    authorizingPrescription?: Array<Reference>;
    type?: CodeableConcept;
    quantity?: Quantity;
    daysSupply?: Quantity;
    recorded?: Date;
    whenPrepared?: Date;
    whenHandedOver?: Date;
    destination?: Reference;
    /**
     * Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.
     */
    receiver?: Array<Reference>;
    /**
     * Extra information about the dispense that could not be conveyed in the other attributes.
     */
    note?: Array<Annotation>;
    renderedDosageInstruction?: Markdown;
    /**
     * Indicates how the medication is to be used by the patient.
     */
    dosageInstruction?: Array<Dosage>;
    substitution?: MedicationDispenseSubstitution;
    /**
     * A summary of the events of interest that have occurred, such as when the dispense was verified.
     */
    eventHistory?: Array<Reference>;
}