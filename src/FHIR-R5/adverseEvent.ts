/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AdverseEventContributingFactor } from './adverseEventContributingFactor';
import { AdverseEventMitigatingAction } from './adverseEventMitigatingAction';
import { AdverseEventParticipant } from './adverseEventParticipant';
import { AdverseEventPreventiveAction } from './adverseEventPreventiveAction';
import { AdverseEventSupportingInfo } from './adverseEventSupportingInfo';
import { AdverseEventSuspectEntity } from './adverseEventSuspectEntity';
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Period } from './period';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Timing } from './timing';
import { Uri } from './uri';

/**
 * An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.
 */
export interface AdverseEvent { 
    /**
     * This is a AdverseEvent resource
     */
    resourceType: 'AdverseEvent';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Array<Identifier>;
    status?: Code;
    actuality?: Code;
    /**
     * The overall type of event, intended for search and filtering purposes.
     */
    category?: Array<CodeableConcept>;
    code?: CodeableConcept;
    subject: Reference;
    encounter?: Reference;
    /**
     * The date (and perhaps time) when the adverse event occurred.
     */
    occurrenceDateTime?: string;
    occurrencePeriod?: Period;
    occurrenceTiming?: Timing;
    detected?: Date;
    recordedDate?: Date;
    /**
     * Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.
     */
    resultingEffect?: Array<Reference>;
    location?: Reference;
    seriousness?: CodeableConcept;
    /**
     * Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.
     */
    outcome?: Array<CodeableConcept>;
    recorder?: Reference;
    /**
     * Indicates who or what participated in the adverse event and how they were involved.
     */
    participant?: Array<AdverseEventParticipant>;
    /**
     * The research study that the subject is enrolled in.
     */
    study?: Array<Reference>;
    expectedInResearchStudy?: boolean;
    /**
     * Describes the entity that is suspected to have caused the adverse event.
     */
    suspectEntity?: Array<AdverseEventSuspectEntity>;
    /**
     * The contributing factors suspected to have increased the probability or severity of the adverse event.
     */
    contributingFactor?: Array<AdverseEventContributingFactor>;
    /**
     * Preventive actions that contributed to avoiding the adverse event.
     */
    preventiveAction?: Array<AdverseEventPreventiveAction>;
    /**
     * The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.
     */
    mitigatingAction?: Array<AdverseEventMitigatingAction>;
    /**
     * Supporting information relevant to the event.
     */
    supportingInfo?: Array<AdverseEventSupportingInfo>;
    /**
     * Comments made about the adverse event by the performer, subject or other participants.
     */
    note?: Array<Annotation>;
}