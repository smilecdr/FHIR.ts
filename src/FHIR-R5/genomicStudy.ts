/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Canonical } from './canonical';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { GenomicStudyAnalysis } from './genomicStudyAnalysis';
import { Id } from './id';
import { Identifier } from './identifier';
import { Markdown } from './markdown';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * A GenomicStudy is a set of analyses performed to analyze and generate genomic data.
 */
export interface GenomicStudy { 
    /**
     * This is a GenomicStudy resource
     */
    resourceType: 'GenomicStudy';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Identifiers for this genomic study.
     */
    identifier?: Array<Identifier>;
    status?: Code;
    /**
     * The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
     */
    type?: Array<CodeableConcept>;
    subject: Reference;
    encounter?: Reference;
    startDate?: Date;
    /**
     * Event resources that the genomic study is based on.
     */
    basedOn?: Array<Reference>;
    referrer?: Reference;
    /**
     * Healthcare professionals who interpreted the genomic study.
     */
    interpreter?: Array<Reference>;
    /**
     * Why the genomic study was performed.
     */
    reason?: Array<CodeableReference>;
    instantiatesCanonical?: Canonical;
    instantiatesUri?: Uri;
    /**
     * Comments related to the genomic study.
     */
    note?: Array<Annotation>;
    description?: Markdown;
    /**
     * The details about a specific analysis that was performed in this GenomicStudy.
     */
    analysis?: Array<GenomicStudyAnalysis>;
}