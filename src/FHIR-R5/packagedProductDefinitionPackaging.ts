/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CodeableConcept } from './codeableConcept';
import { Extension } from './extension';
import { Identifier } from './identifier';
import { PackagedProductDefinitionContainedItem } from './packagedProductDefinitionContainedItem';
import { PackagedProductDefinitionProperty } from './packagedProductDefinitionProperty';
import { ProductShelfLife } from './productShelfLife';
import { Reference } from './reference';

/**
 * A medically related item or items, in a container or package.
 */
export interface PackagedProductDefinitionPackaging { 
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
     */
    identifier?: Array<Identifier>;
    type?: CodeableConcept;
    componentPart?: boolean;
    quantity?: number;
    /**
     * Material type of the package item.
     */
    material?: Array<CodeableConcept>;
    /**
     * A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
     */
    alternateMaterial?: Array<CodeableConcept>;
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: Array<ProductShelfLife>;
    /**
     * Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
     */
    manufacturer?: Array<Reference>;
    /**
     * General characteristics of this item.
     */
    property?: Array<PackagedProductDefinitionProperty>;
    /**
     * The item(s) within the packaging.
     */
    containedItem?: Array<PackagedProductDefinitionContainedItem>;
    /**
     * Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).
     */
    packaging?: Array<PackagedProductDefinitionPackaging>;
}