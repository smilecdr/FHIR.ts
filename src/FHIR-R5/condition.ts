/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Age } from './age';
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { ConditionParticipant } from './conditionParticipant';
import { ConditionStage } from './conditionStage';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Period } from './period';
import { Range } from './range';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
 */
export interface Condition { 
    /**
     * This is a Condition resource
     */
    resourceType: 'Condition';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Array<Identifier>;
    clinicalStatus: CodeableConcept;
    verificationStatus?: CodeableConcept;
    /**
     * A category assigned to the condition.
     */
    category?: Array<CodeableConcept>;
    severity?: CodeableConcept;
    code?: CodeableConcept;
    /**
     * The anatomical location where this condition manifests itself.
     */
    bodySite?: Array<CodeableConcept>;
    subject: Reference;
    encounter?: Reference;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetDateTime?: string;
    onsetAge?: Age;
    onsetPeriod?: Period;
    onsetRange?: Range;
    /**
     * Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
     */
    onsetString?: string;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     */
    abatementDateTime?: string;
    abatementAge?: Age;
    abatementPeriod?: Period;
    abatementRange?: Range;
    /**
     * The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Some conditions, such as chronic conditions, are never really resolved, but they can abate.
     */
    abatementString?: string;
    recordedDate?: Date;
    /**
     * Indicates who or what participated in the activities related to the condition and how they were involved.
     */
    participant?: Array<ConditionParticipant>;
    /**
     * A simple summary of the stage such as \"Stage 3\" or \"Early Onset\". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.
     */
    stage?: Array<ConditionStage>;
    /**
     * Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
     */
    evidence?: Array<CodeableReference>;
    /**
     * Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
     */
    note?: Array<Annotation>;
}