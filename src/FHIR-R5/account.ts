/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AccountBalance } from './accountBalance';
import { AccountCoverage } from './accountCoverage';
import { AccountDiagnosis } from './accountDiagnosis';
import { AccountGuarantor } from './accountGuarantor';
import { AccountProcedure } from './accountProcedure';
import { AccountRelatedAccount } from './accountRelatedAccount';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Instant } from './instant';
import { Markdown } from './markdown';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Period } from './period';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
 */
export interface Account { 
    /**
     * This is a Account resource
     */
    resourceType: 'Account';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).
     */
    identifier?: Array<Identifier>;
    status?: Code;
    billingStatus?: CodeableConcept;
    type?: CodeableConcept;
    name?: string;
    /**
     * Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
     */
    subject?: Array<Reference>;
    servicePeriod?: Period;
    /**
     * The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
     */
    coverage?: Array<AccountCoverage>;
    owner?: Reference;
    description?: Markdown;
    /**
     * The parties responsible for balancing the account if other payment options fall short.
     */
    guarantor?: Array<AccountGuarantor>;
    /**
     * When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
     */
    diagnosis?: Array<AccountDiagnosis>;
    /**
     * When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
     */
    procedure?: Array<AccountProcedure>;
    /**
     * Other associated accounts related to this account.
     */
    relatedAccount?: Array<AccountRelatedAccount>;
    currency?: CodeableConcept;
    /**
     * The calculated account balances - these are calculated and processed by the finance system.  The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
     */
    balance?: Array<AccountBalance>;
    calculatedAt?: Instant;
}