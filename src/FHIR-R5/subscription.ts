/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Canonical } from './canonical';
import { Code } from './code';
import { Coding } from './coding';
import { ContactPoint } from './contactPoint';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Instant } from './instant';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { PositiveInt } from './positiveInt';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { SubscriptionFilterBy } from './subscriptionFilterBy';
import { SubscriptionParameter } from './subscriptionParameter';
import { UnsignedInt } from './unsignedInt';
import { Uri } from './uri';
import { Url } from './url';

/**
 * The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.
 */
export interface Subscription { 
    /**
     * This is a Subscription resource
     */
    resourceType: 'Subscription';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Array<Identifier>;
    name?: string;
    status?: Code;
    topic: Canonical;
    /**
     * Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.
     */
    contact?: Array<ContactPoint>;
    end?: Instant;
    managingEntity?: Reference;
    reason?: string;
    /**
     * The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND).
     */
    filterBy?: Array<SubscriptionFilterBy>;
    channelType: Coding;
    endpoint?: Url;
    /**
     * Channel-dependent information to send as part of the notification (e.g., HTTP Headers).
     */
    parameter?: Array<SubscriptionParameter>;
    heartbeatPeriod?: UnsignedInt;
    timeout?: UnsignedInt;
    contentType?: Code;
    content?: Code;
    maxCount?: PositiveInt;
}