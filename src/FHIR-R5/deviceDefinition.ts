/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { ContactPoint } from './contactPoint';
import { DeviceDefinitionChargeItem } from './deviceDefinitionChargeItem';
import { DeviceDefinitionClassification } from './deviceDefinitionClassification';
import { DeviceDefinitionConformsTo } from './deviceDefinitionConformsTo';
import { DeviceDefinitionCorrectiveAction } from './deviceDefinitionCorrectiveAction';
import { DeviceDefinitionDeviceName } from './deviceDefinitionDeviceName';
import { DeviceDefinitionGuideline } from './deviceDefinitionGuideline';
import { DeviceDefinitionHasPart } from './deviceDefinitionHasPart';
import { DeviceDefinitionLink } from './deviceDefinitionLink';
import { DeviceDefinitionMaterial } from './deviceDefinitionMaterial';
import { DeviceDefinitionPackaging } from './deviceDefinitionPackaging';
import { DeviceDefinitionProperty } from './deviceDefinitionProperty';
import { DeviceDefinitionRegulatoryIdentifier } from './deviceDefinitionRegulatoryIdentifier';
import { DeviceDefinitionUdiDeviceIdentifier } from './deviceDefinitionUdiDeviceIdentifier';
import { DeviceDefinitionVersion } from './deviceDefinitionVersion';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Markdown } from './markdown';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { ProductShelfLife } from './productShelfLife';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * The characteristics, operational status and capabilities of a medical-related component of a medical device.
 */
export interface DeviceDefinition { 
    /**
     * This is a DeviceDefinition resource
     */
    resourceType: 'DeviceDefinition';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    description?: Markdown;
    /**
     * Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.
     */
    identifier?: Array<Identifier>;
    /**
     * Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
     */
    udiDeviceIdentifier?: Array<DeviceDefinitionUdiDeviceIdentifier>;
    /**
     * Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.
     */
    regulatoryIdentifier?: Array<DeviceDefinitionRegulatoryIdentifier>;
    partNumber?: string;
    manufacturer?: Reference;
    /**
     * The name or names of the device as given by the manufacturer.
     */
    deviceName?: Array<DeviceDefinitionDeviceName>;
    modelNumber?: string;
    /**
     * What kind of device or device system this is.
     */
    classification?: Array<DeviceDefinitionClassification>;
    /**
     * Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.
     */
    conformsTo?: Array<DeviceDefinitionConformsTo>;
    /**
     * A device that is part (for example a component) of the present device.
     */
    hasPart?: Array<DeviceDefinitionHasPart>;
    /**
     * Information about the packaging of the device, i.e. how the device is packaged.
     */
    packaging?: Array<DeviceDefinitionPackaging>;
    /**
     * The version of the device or software.
     */
    version?: Array<DeviceDefinitionVersion>;
    /**
     * Safety characteristics of the device.
     */
    safety?: Array<CodeableConcept>;
    /**
     * Shelf Life and storage information.
     */
    shelfLifeStorage?: Array<ProductShelfLife>;
    /**
     * Language code for the human-readable text strings produced by the device (all supported).
     */
    languageCode?: Array<CodeableConcept>;
    /**
     * Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.
     */
    property?: Array<DeviceDefinitionProperty>;
    owner?: Reference;
    /**
     * Contact details for an organization or a particular human that is responsible for the device.
     */
    contact?: Array<ContactPoint>;
    /**
     * An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.
     */
    link?: Array<DeviceDefinitionLink>;
    /**
     * Descriptive information, usage information or implantation information that is not captured in an existing element.
     */
    note?: Array<Annotation>;
    /**
     * A substance used to create the material(s) of which the device is made.
     */
    material?: Array<DeviceDefinitionMaterial>;
    /**
     * Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.
     */
    productionIdentifierInUDI?: Array<Code>;
    guideline?: DeviceDefinitionGuideline;
    correctiveAction?: DeviceDefinitionCorrectiveAction;
    /**
     * Billing code or reference associated with the device.
     */
    chargeItem?: Array<DeviceDefinitionChargeItem>;
}