/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Canonical } from './canonical';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { DataRequirementCodeFilter } from './dataRequirementCodeFilter';
import { DataRequirementDateFilter } from './dataRequirementDateFilter';
import { DataRequirementSort } from './dataRequirementSort';
import { DataRequirementValueFilter } from './dataRequirementValueFilter';
import { Extension } from './extension';
import { PositiveInt } from './positiveInt';
import { Reference } from './reference';

/**
 * Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
 */
export interface DataRequirement { 
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    type?: Code;
    /**
     * The profile of the required data, specified as the uri of the profile definition.
     */
    profile?: Array<Canonical>;
    subjectCodeableConcept?: CodeableConcept;
    subjectReference?: Reference;
    /**
     * Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.   The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
     */
    mustSupport?: Array<string>;
    /**
     * Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
     */
    codeFilter?: Array<DataRequirementCodeFilter>;
    /**
     * Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
     */
    dateFilter?: Array<DataRequirementDateFilter>;
    /**
     * Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).
     */
    valueFilter?: Array<DataRequirementValueFilter>;
    limit?: PositiveInt;
    /**
     * Specifies the order of the results to be returned.
     */
    sort?: Array<DataRequirementSort>;
}