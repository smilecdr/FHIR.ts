/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { SpecimenCollection } from './specimenCollection';
import { SpecimenContainer } from './specimenContainer';
import { SpecimenFeature } from './specimenFeature';
import { SpecimenProcessing } from './specimenProcessing';
import { Uri } from './uri';

/**
 * A sample to be used for analysis.
 */
export interface Specimen { 
    /**
     * This is a Specimen resource
     */
    resourceType: 'Specimen';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Id for specimen.
     */
    identifier?: Array<Identifier>;
    accessionIdentifier?: Identifier;
    status?: Code;
    type?: CodeableConcept;
    subject?: Reference;
    receivedTime?: Date;
    /**
     * Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.
     */
    parent?: Array<Reference>;
    /**
     * Details concerning a service request that required a specimen to be collected.
     */
    request?: Array<Reference>;
    combined?: Code;
    /**
     * The role or reason for the specimen in the testing workflow.
     */
    role?: Array<CodeableConcept>;
    /**
     * A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location).
     */
    feature?: Array<SpecimenFeature>;
    collection?: SpecimenCollection;
    /**
     * Details concerning processing and processing steps for the specimen.
     */
    processing?: Array<SpecimenProcessing>;
    /**
     * The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.
     */
    container?: Array<SpecimenContainer>;
    /**
     * A mode or state of being that describes the nature of the specimen.
     */
    condition?: Array<CodeableConcept>;
    /**
     * To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).
     */
    note?: Array<Annotation>;
}