/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Money } from './money';
import { Narrative } from './narrative';
import { PaymentReconciliationAllocation } from './paymentReconciliationAllocation';
import { PaymentReconciliationProcessNote } from './paymentReconciliationProcessNote';
import { Period } from './period';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * This resource provides the details including amount of a payment and allocates the payment items being paid.
 */
export interface PaymentReconciliation { 
    /**
     * This is a PaymentReconciliation resource
     */
    resourceType: 'PaymentReconciliation';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * A unique identifier assigned to this payment reconciliation.
     */
    identifier?: Array<Identifier>;
    type: CodeableConcept;
    status?: Code;
    kind?: CodeableConcept;
    period?: Period;
    created?: Date;
    enterer?: Reference;
    issuerType?: CodeableConcept;
    paymentIssuer?: Reference;
    request?: Reference;
    requestor?: Reference;
    outcome?: Code;
    disposition?: string;
    date?: string;
    location?: Reference;
    method?: CodeableConcept;
    cardBrand?: string;
    accountNumber?: string;
    expirationDate?: string;
    processor?: string;
    referenceNumber?: string;
    authorization?: string;
    tenderedAmount?: Money;
    returnedAmount?: Money;
    amount: Money;
    paymentIdentifier?: Identifier;
    /**
     * Distribution of the payment amount for a previously acknowledged payable.
     */
    allocation?: Array<PaymentReconciliationAllocation>;
    formCode?: CodeableConcept;
    /**
     * A note that describes or explains the processing in a human readable form.
     */
    processNote?: Array<PaymentReconciliationProcessNote>;
}