/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Extension } from './extension';
import { Reference } from './reference';
import { TestPlanAssertion } from './testPlanAssertion';
import { TestPlanDependency1 } from './testPlanDependency1';
import { TestPlanTestData } from './testPlanTestData';
import { TestPlanTestRun } from './testPlanTestRun';

/**
 * A plan for executing testing on an artifact or specifications.
 */
export interface TestPlanTestCase { 
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    sequence?: number;
    /**
     * The scope or artifact covered by the case, when the individual test case is associated with a testable artifact.
     */
    scope?: Array<Reference>;
    /**
     * The required criteria to execute the test case - e.g. preconditions, previous tests.
     */
    dependency?: Array<TestPlanDependency1>;
    /**
     * The actual test to be executed.
     */
    testRun?: Array<TestPlanTestRun>;
    /**
     * The test data used in the test case.
     */
    testData?: Array<TestPlanTestData>;
    /**
     * The test assertions - the expectations of test results from the execution of the test case.
     */
    assertion?: Array<TestPlanAssertion>;
}