/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Canonical } from './canonical';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { Coding } from './coding';
import { ContactDetail } from './contactDetail';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Markdown } from './markdown';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { ResourceList } from './resourceList';
import { TestScriptDestination } from './testScriptDestination';
import { TestScriptFixture } from './testScriptFixture';
import { TestScriptMetadata } from './testScriptMetadata';
import { TestScriptOrigin } from './testScriptOrigin';
import { TestScriptScope } from './testScriptScope';
import { TestScriptSetup } from './testScriptSetup';
import { TestScriptTeardown } from './testScriptTeardown';
import { TestScriptTest } from './testScriptTest';
import { TestScriptVariable } from './testScriptVariable';
import { Uri } from './uri';
import { UsageContext } from './usageContext';

/**
 * A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
 */
export interface TestScript { 
    /**
     * This is a TestScript resource
     */
    resourceType: 'TestScript';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    url?: Uri;
    /**
     * A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    identifier?: Array<Identifier>;
    version?: string;
    /**
     * Indicates the mechanism used to compare versions to determine which is more current.
     */
    versionAlgorithmString?: string;
    versionAlgorithmCoding?: Coding;
    name?: string;
    title?: string;
    status?: Code;
    experimental?: boolean;
    date?: Date;
    publisher?: string;
    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    contact?: Array<ContactDetail>;
    description?: Markdown;
    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.
     */
    useContext?: Array<UsageContext>;
    /**
     * A legal or geographic region in which the test script is intended to be used.
     */
    jurisdiction?: Array<CodeableConcept>;
    purpose?: Markdown;
    copyright?: Markdown;
    copyrightLabel?: string;
    /**
     * An abstract server used in operations within this test script in the origin element.
     */
    origin?: Array<TestScriptOrigin>;
    /**
     * An abstract server used in operations within this test script in the destination element.
     */
    destination?: Array<TestScriptDestination>;
    metadata?: TestScriptMetadata;
    /**
     * The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion.
     */
    scope?: Array<TestScriptScope>;
    /**
     * Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
     */
    fixture?: Array<TestScriptFixture>;
    /**
     * Reference to the profile to be used for validation.
     */
    profile?: Array<Canonical>;
    /**
     * Variable is set based either on element value in response body or on header field value in the response headers.
     */
    variable?: Array<TestScriptVariable>;
    setup?: TestScriptSetup;
    /**
     * A test in this script.
     */
    test?: Array<TestScriptTest>;
    teardown?: TestScriptTeardown;
}