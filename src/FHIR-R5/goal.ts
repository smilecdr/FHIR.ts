/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { Extension } from './extension';
import { GoalTarget } from './goalTarget';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { Uri } from './uri';

/**
 * Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
 */
export interface Goal { 
    /**
     * This is a Goal resource
     */
    resourceType: 'Goal';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    identifier?: Array<Identifier>;
    lifecycleStatus?: Code;
    achievementStatus?: CodeableConcept;
    /**
     * Indicates a category the goal falls within.
     */
    category?: Array<CodeableConcept>;
    continuous?: boolean;
    priority?: CodeableConcept;
    description: CodeableConcept;
    subject: Reference;
    /**
     * The date or event after which the goal should begin being pursued.
     */
    startDate?: string;
    startCodeableConcept?: CodeableConcept;
    /**
     * Indicates what should be done by when.
     */
    target?: Array<GoalTarget>;
    statusDate?: string;
    statusReason?: string;
    source?: Reference;
    /**
     * The identified conditions and other health record elements that are intended to be addressed by the goal.
     */
    addresses?: Array<Reference>;
    /**
     * Any comments related to the goal.
     */
    note?: Array<Annotation>;
    /**
     * Identifies the change (or lack of change) at the point when the status of the goal is assessed.
     */
    outcome?: Array<CodeableReference>;
}