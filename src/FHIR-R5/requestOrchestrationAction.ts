/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Age } from './age';
import { Canonical } from './canonical';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { Duration } from './duration';
import { Extension } from './extension';
import { Markdown } from './markdown';
import { Period } from './period';
import { Range } from './range';
import { Reference } from './reference';
import { RelatedArtifact } from './relatedArtifact';
import { RequestOrchestrationCondition } from './requestOrchestrationCondition';
import { RequestOrchestrationDynamicValue } from './requestOrchestrationDynamicValue';
import { RequestOrchestrationInput } from './requestOrchestrationInput';
import { RequestOrchestrationOutput } from './requestOrchestrationOutput';
import { RequestOrchestrationParticipant } from './requestOrchestrationParticipant';
import { RequestOrchestrationRelatedAction } from './requestOrchestrationRelatedAction';
import { Timing } from './timing';

/**
 * A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".
 */
export interface RequestOrchestrationAction { 
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    linkId?: string;
    prefix?: string;
    title?: string;
    description?: Markdown;
    textEquivalent?: Markdown;
    priority?: Code;
    /**
     * A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
     */
    code?: Array<CodeableConcept>;
    /**
     * Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
     */
    documentation?: Array<RelatedArtifact>;
    /**
     * Goals that are intended to be achieved by following the requests in this action.
     */
    goal?: Array<Reference>;
    /**
     * An expression that describes applicability criteria, or start/stop conditions for the action.
     */
    condition?: Array<RequestOrchestrationCondition>;
    /**
     * Defines input data requirements for the action.
     */
    input?: Array<RequestOrchestrationInput>;
    /**
     * Defines the outputs of the action, if any.
     */
    output?: Array<RequestOrchestrationOutput>;
    /**
     * A relationship to another action such as \"before\" or \"30-60 minutes after start of\".
     */
    relatedAction?: Array<RequestOrchestrationRelatedAction>;
    /**
     * An optional value describing when the action should be performed.
     */
    timingDateTime?: string;
    timingAge?: Age;
    timingPeriod?: Period;
    timingDuration?: Duration;
    timingRange?: Range;
    timingTiming?: Timing;
    location?: CodeableReference;
    /**
     * The participant that should perform or be responsible for this action.
     */
    participant?: Array<RequestOrchestrationParticipant>;
    type?: CodeableConcept;
    groupingBehavior?: Code;
    selectionBehavior?: Code;
    requiredBehavior?: Code;
    precheckBehavior?: Code;
    cardinalityBehavior?: Code;
    resource?: Reference;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     */
    definitionCanonical?: string;
    /**
     * A reference to an ActivityDefinition that describes the action to be taken in detail, a PlanDefinition that describes a series of actions to be taken, a Questionnaire that should be filled out, a SpecimenDefinition describing a specimen to be collected, or an ObservationDefinition that specifies what observation should be captured.
     */
    definitionUri?: string;
    transform?: Canonical;
    /**
     * Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
     */
    dynamicValue?: Array<RequestOrchestrationDynamicValue>;
    /**
     * Sub actions.
     */
    action?: Array<RequestOrchestrationAction>;
}