/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Canonical } from './canonical';
import { Code } from './code';
import { CodeableConcept } from './codeableConcept';
import { CodeableReference } from './codeableReference';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { Id } from './id';
import { Identifier } from './identifier';
import { Meta } from './meta';
import { Narrative } from './narrative';
import { Period } from './period';
import { Reference } from './reference';
import { ResourceList } from './resourceList';
import { TaskInput } from './taskInput';
import { TaskOutput } from './taskOutput';
import { TaskPerformer } from './taskPerformer';
import { TaskRestriction } from './taskRestriction';
import { Uri } from './uri';

/**
 * A task to be performed.
 */
export interface Task { 
    /**
     * This is a Task resource
     */
    resourceType: 'Task';
    id?: Id;
    meta?: Meta;
    implicitRules?: Uri;
    language?: Code;
    text?: Narrative;
    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
     */
    contained?: Array<ResourceList>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * The business identifier for this task.
     */
    identifier?: Array<Identifier>;
    instantiatesCanonical?: Canonical;
    instantiatesUri?: Uri;
    /**
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient.
     */
    basedOn?: Array<Reference>;
    groupIdentifier?: Identifier;
    /**
     * Task that this particular task is part of.
     */
    partOf?: Array<Reference>;
    status?: Code;
    statusReason?: CodeableReference;
    businessStatus?: CodeableConcept;
    intent?: Code;
    priority?: Code;
    doNotPerform?: boolean;
    code?: CodeableConcept;
    description?: string;
    focus?: Reference;
    _for?: Reference;
    encounter?: Reference;
    requestedPeriod?: Period;
    executionPeriod?: Period;
    authoredOn?: Date;
    lastModified?: Date;
    requester?: Reference;
    /**
     * The kind of participant or specific participant that should perform the task.
     */
    requestedPerformer?: Array<CodeableReference>;
    owner?: Reference;
    /**
     * The entity who performed the requested task.
     */
    performer?: Array<TaskPerformer>;
    location?: Reference;
    /**
     * A description, code, or reference indicating why this task needs to be performed.
     */
    reason?: Array<CodeableReference>;
    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    insurance?: Array<Reference>;
    /**
     * Free-text information captured about the task as it progresses.
     */
    note?: Array<Annotation>;
    /**
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     */
    relevantHistory?: Array<Reference>;
    restriction?: TaskRestriction;
    /**
     * Additional information that may be needed in the execution of the task.
     */
    input?: Array<TaskInput>;
    /**
     * Outputs produced by the Task.
     */
    output?: Array<TaskOutput>;
}