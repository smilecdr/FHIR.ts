/**
 * FHIR Version R5
 * The following is auto generated resource definition.
 *
 * OpenAPI spec version: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Annotation } from './annotation';
import { Canonical } from './canonical';
import { CodeableConcept } from './codeableConcept';
import { DateTime } from './dateTime';
import { Extension } from './extension';
import { GenomicStudyDevice } from './genomicStudyDevice';
import { GenomicStudyInput } from './genomicStudyInput';
import { GenomicStudyOutput } from './genomicStudyOutput';
import { GenomicStudyPerformer } from './genomicStudyPerformer';
import { Identifier } from './identifier';
import { Reference } from './reference';
import { Uri } from './uri';

/**
 * A GenomicStudy is a set of analyses performed to analyze and generate genomic data.
 */
export interface GenomicStudyAnalysis { 
    id?: string;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
     */
    extension?: Array<Extension>;
    /**
     * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    modifierExtension?: Array<Extension>;
    /**
     * Identifiers for the analysis event.
     */
    identifier?: Array<Identifier>;
    /**
     * Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
     */
    methodType?: Array<CodeableConcept>;
    /**
     * Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
     */
    changeType?: Array<CodeableConcept>;
    genomeBuild?: CodeableConcept;
    instantiatesCanonical?: Canonical;
    instantiatesUri?: Uri;
    title?: string;
    /**
     * The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.
     */
    focus?: Array<Reference>;
    /**
     * The specimen used in the analysis event.
     */
    specimen?: Array<Reference>;
    date?: Date;
    /**
     * Any notes capture with the analysis event.
     */
    note?: Array<Annotation>;
    protocolPerformed?: Reference;
    /**
     * The genomic regions to be studied in the analysis (BED file).
     */
    regionsStudied?: Array<Reference>;
    /**
     * Genomic regions actually called in the analysis event (BED file).
     */
    regionsCalled?: Array<Reference>;
    /**
     * Inputs for the analysis event.
     */
    input?: Array<GenomicStudyInput>;
    /**
     * Outputs for the analysis event.
     */
    output?: Array<GenomicStudyOutput>;
    /**
     * Performer for the analysis event.
     */
    performer?: Array<GenomicStudyPerformer>;
    /**
     * Devices used for the analysis (e.g., instruments, software), with settings and parameters.
     */
    device?: Array<GenomicStudyDevice>;
}